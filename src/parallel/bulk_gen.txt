
  void Profile::bulk_add_sample_type(std::vector<std::pair<uint64_t, uint64_t>>& tr, uint8_t* b) {
    parlay::parallel_for(0, tr.size(), [&](int i) {
      Seeker seeker(b, tr[i].first, tr[i].second);
      sample_type[i] = new ValueType();
      sample_type[i]->parseValueType(seeker);
    });
  }
  
  void Profile::bulk_add_sample(std::vector<std::pair<uint64_t, uint64_t>>& tr, uint8_t* b) {
    parlay::parallel_for(0, tr.size(), [&](int i) {
      Seeker seeker(b, tr[i].first, tr[i].second);
      sample[i] = new Sample();
      sample[i]->parseSample(seeker);
    });
  }
  
  void Profile::bulk_add_mapping(std::vector<std::pair<uint64_t, uint64_t>>& tr, uint8_t* b) {
    parlay::parallel_for(0, tr.size(), [&](int i) {
      Seeker seeker(b, tr[i].first, tr[i].second);
      mapping[i] = new Mapping();
      mapping[i]->parseMapping(seeker);
    });
  }
  
  void Profile::bulk_add_location(std::vector<std::pair<uint64_t, uint64_t>>& tr, uint8_t* b) {
    parlay::parallel_for(0, tr.size(), [&](int i) {
      Seeker seeker(b, tr[i].first, tr[i].second);
      location[i] = new Location();
      location[i]->parseLocation(seeker);
    });
  }
  
  void Profile::bulk_add_function(std::vector<std::pair<uint64_t, uint64_t>>& tr, uint8_t* b) {
    parlay::parallel_for(0, tr.size(), [&](int i) {
      Seeker seeker(b, tr[i].first, tr[i].second);
      function[i] = new Function();
      function[i]->parseFunction(seeker);
    });
  }
  
void Profile::bulk_add_string_table(std::vector<std::pair<uint64_t, uint64_t>>& tr, uint8_t* b) {
  parlay::parallel_for(0, tr.size(), [&](int i) {
    Seeker seeker(b, tr[i].first, tr[i].second);
    seeker.ReadString(&string_table[i], tr[i].second);
  });
}
